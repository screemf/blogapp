name: Django CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc python3-dev libffi-dev libssl-dev ffmpeg

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run migrations
      run: python manage.py migrate

    - name: Run tests
      run: python manage.py test

    - name: Build Docker image
      run: docker build -t django-blogapp .

    - name: Run Django container
      run: |
        docker run -d -p 8000:8000 --name django-app django-blogapp
        sleep 15  # Wait for Django to start
        docker ps -a
        curl -v http://localhost:8000/healthcheck/

    - name: Setup and run avtest
      run: |
        # Клонируем репозиторий avtest
        git clone https://github.com/screemf/avtest.git
        cd avtest
        
        # Устанавливаем зависимости (если есть requirements.txt)
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        else
          pip install opencv-python numpy pillow
        fi
        
        # Запускаем avtest (адаптируйте команду под ваш случай)
        python runner.py --server-url http://localhost:8000
        
        # Проверяем результат (пример)
        if [ -f "output.json" ]; then
          echo "AVTest completed successfully"
          cat output.json
        else
          echo "AVTest failed to produce output"
          exit 1
        fi

    - name: Cleanup
      run: |
        docker stop django-app || true
        docker rm django-app || true
      if: always()