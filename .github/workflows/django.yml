name: Django CI with AVTest

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          gcc \
          python3-dev \
          libffi-dev \
          libssl-dev \
          ffmpeg \
          chromium-browser \
          chromium-chromedriver \
          libarchive-tools

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install beautifulsoup4 webdriver-manager pillow

    - name: Run migrations
      run: python manage.py migrate

    - name: Run Django tests
      run: python manage.py test

    - name: Build Docker image
      run: docker build -t django-blogapp .

    - name: Run Django container
      run: |
        docker run -d -p 8000:8000 --name django-app django-blogapp
        sleep 15
        docker ps -a
        curl -v http://localhost:8000/healthcheck/

    - name: Setup and run AVTest
      run: |
        git clone https://github.com/screemf/avtest.git
        cd avtest
        
        # Создаем тестовое изображение
        mkdir -p Test/test_data
        python -c "from PIL import Image; Image.new('RGB', (100, 100), color='red').save('Test/test_data/test_image.jpg')"
        
        pip install \
          opencv-python \
          numpy \
          pytest \
          pytest-xdist \
          requests \
          selenium \
          allure-pytest
        
        # Установка Allure
        wget https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.tgz
        mkdir -p allure
        tar -xzf allure-2.27.0.tgz -C allure --strip-components=1
        echo "$(pwd)/allure/bin" >> $GITHUB_PATH
        
        cd Test   
        
        echo "Running test suite 1"
        python -m pytest WS_test.py Post_test.py Post_detail_test.py -n 3 --alluredir=./allure-results || true
        
        echo "Running test suite 2"
        python -m pytest Auth_test.py Users_test.py registr_test.py --alluredir=./allure-results || true

    - name: Generate Allure report
      if: always()
      run: |
        cd avtest/Test
        mkdir -p ../../allure-report
        ../allure/bin/allure generate ./allure-results -o ../../allure-report --clean
        echo "<!DOCTYPE html><html><head><meta http-equiv='refresh' content='0; url=index.html'></head></html>" > ../../allure-report/redirect.html

    - name: Upload Allure report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-report
        path: allure-report
        retention-days: 5

    - name: Show report instructions
      if: always()
      run: |
        echo "=============================================="
        echo "Как просмотреть Allure отчет:"
        echo "1. Перейдите на вкладку 'Artifacts' в GitHub Actions"
        echo "2. Скачайте архив 'allure-report'"
        echo "3. Распакуйте архив"
        echo "4. Откройте файл index.html в браузере"
        echo "=============================================="

    - name: Cleanup
      run: |
        docker stop django-app || true
        docker rm django-app || true
      if: always()